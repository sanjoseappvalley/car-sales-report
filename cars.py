#!/usr/bin/env python3
import json
import locale
import sys
import emails
import reports
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximus.
    Returns a list of lines that summarize the information."""
    locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
    max_revenue = {"revenue": 0}
    most_sales = {"sales": 0}
    car_year = {}
    most_popular_year = 0
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.45" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # Calculate car model that has most sales
        if item["total_sales"] > most_sales["sales"]:
            most_sales["car_model"] = item["car"]["car_model"]
            most_sales["sales"] = item["total_sales"]
        # Calculate most popular car_year
        if item["car"]["car_year"] not in car_year:
            car_year[item["car"]["car_year"]] = item["total_sales"]
        else:
            car_year[item["car"]["car_year"]] += item["total_sales"]
    highest = 0
    for k, v in car_year.items():
        if v > highest:
            highest = v
            most_popular_year = k

    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(most_sales["car_model"], most_sales["sales"]),
        "the most popular year was {} with {} sales.".format(most_popular_year, highest)
    ]
    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    table_data = cars_dict_to_table(data)
    # TODO: turn this into a PDF report
    reports.generate("/tmp/cars.pdf", "A Summary of car sales", "Most Sales, Most Revenue, Most Popular Year", table_data)
    # TODO: send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales sumary for last month"
    body = "The same summary from the PDF, but using \n between the lines"

    message = emails.generate(sender, receiver, subject, body, "/tmp/report.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)


"""Automatically Generate a PDF and send it by Email
Course 6 - Week 3 Lab"""
